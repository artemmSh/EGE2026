from re import *

data = 'Роза в садуРоза'
pattern = r'Роза'
res = match(pattern, data) # Проверяет, начинается ли data с шаблона pattern
print(res.group()) # Выводит содержимое найденной подстроки
print(res.span()) # Выводит индексы найденной подстроки
print(res.start()) # Выводит индекс начала найденной подстроки
print(res.end()) # Выводит индекс конца найденной подстроки

res2 = search(pattern, data) # Находит первое слева вхождение, возвращает match объект
print(res2)

data2 = 'BABABABABABABABA'
pattern2 = r'BAB'
matches = finditer(pattern2, data2) # Ищет все непересекающиеся совпадения регулярного выражения в строке. Она возвращает итератор, содержащий в себе match-объекты каждого найденного совпадения
print([m.group() for m in matches])

matches2 = findall(pattern2, data2) # Ищет все непересекающиеся совпадения регулярного выражения в строке. В отличие от finditer(), возвращает список строк или кортежей, содержащих найденные совпадения.
print(matches2)

matches3 = sub(pattern2, 'BOB', data2)
print(matches3)
# Метасимволы
# . – ровно один любой символ;
# \d – любая цифра;
# \D – любая НЕ цифра;
# \s – любой пробельный символ;
# \S – любой НЕ пробельный символ;
# \w – любая буква, цифра или _;
# \b – граница слова;
# \В – НЕ граница слова

data4 = 'ghgfhgfhgfhKOT ghgfhgfhgfhgfhgfhKAThgfhgffggfhfghgffgh KIT'
pattern4 = r'K/DT'
print(sub(pattern4, 'MGER', data4))
print(findall(pattern4, data4))

# [a-z] – латинский алфавит в нижнем регистре
# [A-Z] – латинский алфавит в верхнем регистре
# [0-9a-zA-Z] – все цифры и буквы
# [а-яё] – кириллица в нижнем регистре
# [0-9] – цифры от 0 до 9
# ^ - исключающий символ
# [^0-9] – НЕ цифры от 0 до 9

# Квантификаторы
# Количество символов можно указывать в виде диапазона «{m, n}»,
# что будет значить от m до n повторений предыдущего символа включительно.

# +  /  {1,} – хотя бы одно вхождение;
# *  /  {0,} – любое кол-во вхождений;
# ? – либо 0, либо 1 раз

# Скобочные группы
# (NPO|PNO)+ - выражение позволило сгруппировать подстроки для корректной работы +
# Положительная опережающая проверка - (?=...)
# Отрицательная опережающая проверка - (?!...)
# Положительная ретроспективная проверка - (?<=...)
# Отрицательная ретроспективная проверка - (?<!...)





